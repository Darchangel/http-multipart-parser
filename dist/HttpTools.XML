<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HttpTools</name>
    </assembly>
    <members>
        <member name="T:HttpTools.Util.WriteMultiPartFile">
            <summary>
            Delegate for writing a file included in a multipart request
            to a file on disk
            </summary>
            <param name="filePath">The path where to write the file</param>
        </member>
        <member name="T:HttpTools.Util.GetFileData">
            <summary>
            Delegate for obtaining the data of a file included in a
            multipart request
            </summary>
            <returns>
            The file's data.
            <i>string</i> if it is a text file,
            <i>byte[]</i> otherwise.
            </returns>
        </member>
        <member name="T:HttpTools.Util.DiscardFile">
            <summary>
            Delegate for discarding a file included in a multipart request.
            Reads the request stream until the end of the file.
            </summary>
        </member>
        <member name="T:HttpTools.Util.HTTPMultipartParser">
            <summary>
            Parser for HTTP Multipart content.
            Parses the data into a dictionary of fields, indexed by name.
            If files are set to be streamed, provides an IEnumerable of
            the found files to be written to disk (or discarded).
            </summary>
        </member>
        <member name="M:HttpTools.Util.HTTPMultipartParser.#ctor(System.IO.Stream)">
            <summary>
            Prepare a Multipart Parser
            </summary>
            <param name="stream">The HTTP multipart request body</param>
        </member>
        <member name="M:HttpTools.Util.HTTPMultipartParser.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Prepare a Multipart Parser with a specific encoding
            </summary>
            <param name="stream">The HTTP multipart request body</param>
            <param name="encoding">The encoding to use when parsing</param>
        </member>
        <member name="M:HttpTools.Util.HTTPMultipartParser.#ctor(System.IO.Stream,HttpTools.Util.EFileHandlingType)">
            <summary>
            Prepare a Multipart Parser and specify the file handling type
            </summary>
            <param name="stream">The HTTP multipart request body</param>
            <param name="type">How the parser should handle files</param>
        </member>
        <member name="M:HttpTools.Util.HTTPMultipartParser.#ctor(System.IO.Stream,System.Text.Encoding,HttpTools.Util.EFileHandlingType)">
            <summary>
            Prepare a Multipart Parser with a specific encoding, specifying the file handling
            </summary>
            <param name="stream">The HTTP multipart request body</param>
            <param name="encoding">The encoding to use when parsing</param>
            <param name="type">How the parser should handle files</param>
        </member>
        <member name="M:HttpTools.Util.HTTPMultipartParser.Parse">
            <summary>
            Parse the multipart request
            </summary>
            <returns>
            If any file type is set to be streamed, returns an IEnumerable of the streamed files.
            If no files are streamed, returns an empty IEnumerable.
            </returns>
        </member>
        <member name="P:HttpTools.Util.HTTPMultipartParser.Fields">
            <summary>
            Fields in the multipart data, indexed by field name
            </summary>
        </member>
        <member name="T:HttpTools.Util.BinaryData">
            <summary>
            Represents a binary file in a multipart request
            </summary>
        </member>
        <member name="T:HttpTools.Util.MultipartData">
            <summary>
            One part of data in a multipart request's body.
            </summary>
        </member>
        <member name="P:HttpTools.Util.MultipartData.Name">
            <summary>
            The part's name ("name" attribute of the form field) 
            </summary>
        </member>
        <member name="P:HttpTools.Util.MultipartData.FileName">
            <summary>
            The original file name
            (or null if it is not a file)
            </summary>
        </member>
        <member name="P:HttpTools.Util.MultipartData.ContentType">
            <summary>
            The part's content type (e.g. "text/plain" or "application/octet-stream")
            </summary>
        </member>
        <member name="P:HttpTools.Util.MultipartData.IsBinary">
            <summary>
            True if the part has a binary type, false otherwise
            </summary>
        </member>
        <member name="P:HttpTools.Util.MultipartData.IsFile">
            <summary>
            True if the part is a file, false otherwise
            </summary>
        </member>
        <member name="M:HttpTools.Util.BinaryData.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:HttpTools.Util.BinaryData.Data">
            <summary>
            The binary data included in the file
            </summary>
        </member>
        <member name="T:HttpTools.Util.EFileHandlingType">
            <summary>
            Controls how file data is handled by the parser
            </summary>
        </member>
        <member name="F:HttpTools.Util.EFileHandlingType.ALL_STREAMED">
            <summary>
            All files are streamed
            </summary>
        </member>
        <member name="F:HttpTools.Util.EFileHandlingType.ALL_BUFFERED">
            <summary>
            All files are buffered
            </summary>
        </member>
        <member name="F:HttpTools.Util.EFileHandlingType.STREAMED_BINARY">
            <summary>
            Binary files are streamed, text files are buffered
            </summary>
        </member>
        <member name="F:HttpTools.Util.EFileHandlingType.STREAMED_TEXT">
            <summary>
            Text files are streamed, binary files are buffered
            </summary>
        </member>
        <member name="T:HttpTools.Util.StreamedFileData">
            <summary>
            Represents a streamed file in a multipart request.
            Contains methods to access the streamed file's data,
            write it to a file or discard it.
            </summary>
        </member>
        <member name="P:HttpTools.Util.StreamedFileData.ToFile">
            <summary>
            Delegate to write the file to disk
            </summary>
        </member>
        <member name="P:HttpTools.Util.StreamedFileData.Discard">
            <summary>
            Delegate to discard the file
            (simply advance the stream over it)
            </summary>
        </member>
        <member name="P:HttpTools.Util.StreamedFileData.GetData">
            <summary>
            Delegate to obtain the file data in memory
            </summary>
            <returns>
            If the file is binary (Binary == true), a byte[] with
            the file contents. If not, returns a string.
            </returns>
        </member>
        <member name="T:HttpTools.Util.TextData">
            <summary>
            A textual part of a multipart request
            </summary>
        </member>
        <member name="P:HttpTools.Util.TextData.Data">
            <summary>
            The part's data
            </summary>
        </member>
        <member name="T:HttpTools.Util.ContentTypes">
            <summary>
            Class to determine if data is binary or not from its media type
            </summary>
        </member>
        <member name="F:HttpTools.Util.ContentTypes.binary">
            <summary>
            Types to be considered binary go here
            </summary>
        </member>
        <member name="F:HttpTools.Util.ContentTypes.text">
            <summary>
            Types to be considered text go here
            </summary>
        </member>
        <member name="F:HttpTools.Util.ContentTypes.defaultValue">
            <summary>
            The default value. true for binary, false for text.
            </summary>
        </member>
        <member name="F:HttpTools.Util.ContentTypes.correspondence">
            <summary>
            Keeps the correspondence between types and their binary status
            </summary>
        </member>
        <member name="M:HttpTools.Util.ContentTypes.#cctor">
            <summary>
            Prepare the dictionary from the two arrays
            </summary>
        </member>
        <member name="M:HttpTools.Util.ContentTypes.IsBinary(System.String)">
            <summary>
            Determine if a given media type is or not binary
            </summary>
            <param name="type">The media type to check</param>
            <returns>true if the type is considered binary, false otherwise</returns>
        </member>
    </members>
</doc>
